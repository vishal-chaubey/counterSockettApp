const chai = require('chai');
const chaiHttp = require('chai-http');
const http = require('http');
chai.use(chaiHttp);
const expect = chai.expect;
const app = require('../app');
const indexController = require('../controllers/indexController');
const randomData = require('../models/random-data');



//Our parent block
describe('RANDOM', () => {
    describe('/GET data', () => {
        it('it should GET all the data generated by cron', (done) => {
            chai.request(app)
                .get('/')
                .end((err, res) => {
                    expect(err).to.be.null;
                    expect(res).to.have.status(200);
                    expect(res).to.be.json;
                    done();
                });
        });
    });
    describe('/GET data with query', () => {
        it('it should GET data based on query ftom generated by cron', (done) => {
            chai.request(app)
                .get('/')
                .query({ query: 'type', sort_by: 'created_at', sorting_order: 'asc', page: 0, count: 10 })
                .end((err, res) => {
                    expect(err).to.be.null;
                    expect(res).to.have.status(200);
                    expect(res).to.be.json;
                    done();
                });
        });
    });
    describe('Generate random string', () => {
        it("should return random string between 5 to 50 charactor", () => {
            expect(indexController.randomString(indexController.chars)).to.be.string;
            expect(indexController.randomString(indexController.chars)).to.be.length >= 5;
            expect(indexController.randomString(indexController.chars)).to.be.length <= 50;
        })
    });

    describe('Random type', () => {
        it("should return random type in [type1, type2, type3]", () => {
            expect(indexController.randTypeValue(indexController.type)).not.to.be.null;
            expect(indexController.randTypeValue(indexController.type)).to.be.string;
            expect([indexController.randTypeValue(indexController.type)]).to.not.have.members(['type1', 'type2', 'type3']);
        })
    });
    
    describe('Save data in db', () => {
        it("should save object in db", () => {
            const random = new randomData({ string: 'Pickachu', type: "type1" });
            random.save()
                .then(data => {
                    expect(data).not.to.be.undefined;
                    expect(data.string).to.be.string;
                    done();
                });
        })
    });

    describe("#scheduledJob", () => {
        it("should schedule job", () => {
            indexController.startCronjob()
        });
    });

    describe("Socket", () => {
        it("should schedule job", () => {
            const server = http.createServer(app);
            beforeEach(() => {
                global.io.require('socket.io')(server).emit(process.env.EMITTED_CHANNEL, { string: 'Pickachu', type: "type1" })
            });
            afterEach(() => {
                server.close();
            });
        });
    });

});